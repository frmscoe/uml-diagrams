@startuml
start
:Accept http POST request from CRSP;
 note right
            Data from CRSP:
            * Pacs 002 transaction
            * network sub-map
        end note
:Read rule config from config DB;
 note right
            Required Parameter:
            * Rule ID
            * Rule CFG
        end note
if (Rule config is found & Rule config is valid) then (yes)
 if (If the current transaction is unsuccessful) then (no)
  if (Historical transactions are found) then (yes)
   if (Query the transaction graph for the most recent successful pacs.008 message where the current debtor from the pacs.002 message is the creditor) then (yes)
   else (no)
   : Return ruleResult as false;
    note right
            ruleResult:
            * "id": "027@1.0.0",
            * "cfg": "1.0.0",
            * "subRuleRef": ".00",
            * "result": false,
            * "reason": "Insufficient transaction history"
        end note
   stop
  endif
  if (Find the transaction amount from most recent pacs.008 edge to the debtor) then (yes)
   else (no)
   : Return ruleResult as false;
   note right
            ruleResult:
            * "id": "027@1.0.0",
            * "cfg": "1.0.0",
            * "subRuleRef": ".00",
            * "result": false,
            * "reason": "Insufficient transaction history"
        end note
   stop
  endif
  :Compare the transaction value from the previous pacs.008 message edge
   to the transaction value in the incoming pacs.008 message edge;
   : determine rule result;
  else (no)
   : Return ruleResult as false;
   stop
  endif
else (yes)
  : Return ruleResult as false;
  note right
            ruleResult:
            * "id": "027@1.0.0",
            * "cfg": "1.0.0",
            * "subRuleRef": ".01",
            * "result": false,
            * "reason": "Unsuccessful transaction"
        end note
  stop
endif
:Submit rule result to the typology processor;
note right
    Rule output payload includes:
    * Rule Result
    * Network sub-map
    * Original transaction data;
end note
stop
else (no)
   : Return ruleResult as false;
   stop
@enduml
